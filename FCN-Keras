import tensorflow 
from tensorflow.keras.backend import *
from tensorflow.keras.models import *
from tensorflow.keras.layers import *

def FCN(pretrained_weights = None,input_size = (224,224,3)):
    inputs = Input(input_size)
    conv1 = Conv2D(64, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(inputs)
    conv1 = Conv2D(64, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv1)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
    
    conv2 = Conv2D(128, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool1)
    conv2 = Conv2D(128, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv2)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
    
    conv3 = Conv2D(256, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool2)
    conv3 = Conv2D(256, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv3)
    conv3 = Conv2D(256, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv3)
    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)
    
    conv4 = Conv2D(512, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool3)
    conv4 = Conv2D(512, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv4)
    conv4 = Conv2D(512, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv4)
    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)

    conv5 = Conv2D(512, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool4)
    conv5 = Conv2D(512, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv5)
    conv5 = Conv2D(512, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv5)
    pool5 = MaxPooling2D(pool_size=(2, 2))(conv5)
        
    fc6 = Conv2D(4096, 7, activation = 'relu')(pool5)
    drop6 = Dropout(0.5)(fc6)
    
    fc7 = Conv2D(4096, 1, activation = 'relu')(fc6)
    drop7 = Dropout(0.5)(fc7)
    
    score = Conv2D(21, 1, activation = 'softmax')(fc7)
    
    #FCN32
    #up32 = Conv2DTranspose(21, 64, strides = 32)(score)
    
    #FCN16
    up2 = Conv2DTranspose(21, 4, strides = 2 )(score)
    score_pool4 = Conv2D(21, 1, activation = 'relu', kernel_initializer = 'he_normal')(pool4)
    
    #score_pool4.shape.add(Cropping2D(cropping=((2, 2), (4, 4)),score_pool4)
    #merge16 = concatenate([up2, score_pool4], )  # axis
    #print('score_pool4',model.output_shape)
    up16 = Conv2DTranspose(21, 32, stride = 16)(merge16)
      
    #FCN8
    score_pool3 = Conv2D(21, 1, activation = 'relu', kernel_initializer = 'he_normal')(pool3)                      
    #score_pool3.shape.add(Cropping2D(cropping=((2, 2), (4, 4)),score_pool3)
    merge8_1 = concatenate([up2, score_pool4])
    merge8_2 = concatenate([merge8_1, score_pool3])
    up8 = Conv2DTranspose(21, 16, stride = 8)(merge8_2)
   

    model = Model(inputs = inputs, outputs = up8)
    #model.summary()
     
